AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy Jenkins into a management VPC
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-01606d6a6378a7504
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0e535d4775c0e86ab
  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0a8e758f5e873d1c1
  InstanceType:
    Type: String
    Default: t3.2xlarge
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: SUPPORT
  EnvType:
    Type: String
    Default: prod
    AllowedValues: ['dev', 'qa', 'prod']
  VolumeSize:
    Type: Number
    Default: 500

Resources:
  JenkinsPorts:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow vpn access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.12.0.0/16
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  JenkinsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  JenkinsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref JenkinsRole

  JenkinsRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref JenkinsRole
      InstanceProfileName:
        !Join
        - '_'
        - - 'Jenkins'
          - !Ref AWS::StackName

  JenkinsMasterEC2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          # All of the config keys (group of actions) that we want to be applied once, those must go in installation configset
          installation:
            - 01_setup-cfn-hup
            - 02_amazon-cloudwatch-agent
            - 03_required-packages
            - 04_bash-scripts
            - 05_restore-jenkins-data
            - 06_update-jenkins-plugins
            - 07_crontab
          # All of the config keys (group of actions) that we want to be re-applied if and when they are changed, those must go in reconfiguration configset
          reconfiguration:
            - 04_bash-scripts
            # In here, we can later add as many reconfiguration config keys as we want

        # cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents in the metadata section, cfn-hup will call cfn-init.
        01_setup-cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=5
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.JenkinsMasterEC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource JenkinsMasterEC2 --configsets reconfiguration --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01-Enable-cfn-hup:
              command: systemctl enable cfn-hup.service
            02-Start-cfn-hup:
              command: systemctl start cfn-hup.service

        # Definition of json configuration of AmazonCloudWatchAgent
        02_amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                	"logs": {
                		"logs_collected": {
                			"files": {
                				"collect_list": [
                          {
                						"file_path": "/var/log/cfn-hup.log",
                						"log_group_name": "${JenkinsCloudwatchLogGroup}",
                						"log_stream_name": "{instance_id}/cfn-hup.log",
                						"timezone": "UTC"
                					},
                					{
                						"file_path": "/var/log/cfn-init.log",
                						"log_group_name": "${JenkinsCloudwatchLogGroup}",
                						"log_stream_name": "{instance_id}/cfn-init.log",
                						"timezone": "UTC"
                					},
                					{
                						"file_path": "/var/log/cfn-init-cmd.log",
                						"log_group_name": "${JenkinsCloudwatchLogGroup}",
                						"log_stream_name": "{instance_id}/cfn-init-cmd.log",
                						"timezone": "UTC"
                					},
                					{
                						"file_path": "/var/log/cloud-init.log",
                						"log_group_name": "${JenkinsCloudwatchLogGroup}",
                						"log_stream_name": "{instance_id}/cloud-init.log",
                						"timezone": "UTC"
                					},
                					{
                						"file_path": "/var/log/cloud-init-output.log",
                						"log_group_name": "${JenkinsCloudwatchLogGroup}",
                						"log_stream_name": "{instance_id}/cloud-init-output.log",
                						"timezone": "UTC"
                					},
                					{
                						"file_path": "/var/log/cfn-wire.log",
                						"log_group_name": "${JenkinsCloudwatchLogGroup}",
                						"log_stream_name": "{instance_id}/cfn-wire.log",
                						"timezone": "UTC"
                					}
                				]
                			}
                		}
                	},
                	"metrics": {
                		"append_dimensions": {
                			"InstanceId": "${!aws:InstanceId}"
                		},
                		"metrics_collected": {
                			"mem": {
                				"measurement": ["mem_used_percent"]
                			},
                			"disk": {
                				"measurement": ["disk_used_percent"],
                        "resources": ["/"]
                			}
                		}
                	}
                }
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01-StopService:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02-StartService:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

        # Installation of required packages on EC2 Instance
        03_required-packages:
          commands:
            01_apt_upgrade:
              command: apt -qq update && apt -qq -y dist-upgrade && apt -qq -y autoremove
            02_set_alias_python2.7:
              command: update-alternatives --install /usr/bin/python python /usr/bin/python3 10
            03_set_alias_python3.7:
              command: update-alternatives --install /usr/bin/python3.7 python3.7 /usr/bin/python3 10
            04_install_additional_tools:
              command: apt -qq -y remove cmdtest && apt -qq -y install awscli python3-pip python3-venv jq curl yarn docker.io apt-transport-https ca-certificates gnupg2 software-properties-common net-tools ncdu
            05_install_jenkins:
              command: !Sub |
                wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -
                sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
                apt -qq update
                apt -qq -y install openjdk-11-jdk
                apt -qq -y install jenkins
            06_usermod:
              command: usermod -a -G docker jenkins && usermod -a -G docker ubuntu
            07_install_kubectl:
              command: curl -sL https://storage.googleapis.com/kubernetes-release/release/v1.18.20/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl
            08_install_glooctl:
              command: !Sub |
                curl -sL https://github.com/solo-io/gloo/releases/download/v1.7.11/glooctl-linux-amd64 -o /usr/local/bin/glooctl && chmod +x /usr/local/bin/glooctl
            09_install_helm:
              command: !Sub |
                curl -sL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

        # Creating the bash scripts on EC2 Instance
        04_bash-scripts:
          files:
            /usr/bin/s3-sync:
              content: !Sub |
                #!/bin/bash -e
                ACTION=$1
                FDATE=$( date '+%Y%m%d' )
                JENKINS_HOME='/var/lib/jenkins'

                if [ "$ACTION" == "BACKUP" ]; then
                  echo "Uploading backup to S3..."
                  aws s3 --region us-east-1 sync $JENKINS_HOME s3://reptrak-backups/jenkins/${EnvType}/$FDATE/ --exclude workspace/*
                else
                  echo "Downloading jenkins-cli.jar"
                  # https://www.jenkins.io/doc/book/managing/cli/#downloading-the-client
                  if [ ! -f /tmp/jenkins-cli.jar ]; then
                    # Let the jenkins stabalize after installation
                    sleep 45
                    wget -q http://localhost:8080/jnlpJars/jenkins-cli.jar -O /tmp/jenkins-cli.jar
                  fi

                  echo "Restoring backup from S3..."
                  systemctl stop jenkins.service
                  aws s3 --region us-east-1 sync s3://reptrak-backups/jenkins/${EnvType}/$FDATE/ $JENKINS_HOME --only-show-errors
                  chown -R jenkins:jenkins $JENKINS_HOME
                  systemctl start jenkins.service
                fi
              mode: "000755"
              owner: "root"
              group: "root"
            /usr/bin/jenkins-plugin-updater:
              content: !Sub |
                #!/bin/bash -e
                JENKINS_HOME='/var/lib/jenkins'

                echo "Downloading jenkins-cli.jar"
                # https://www.jenkins.io/doc/book/managing/cli/#downloading-the-client
                if [ ! -f /tmp/jenkins-cli.jar ]; then
                  # Let the jenkins stabalize after installation
                  sleep 45
                  wget -q http://localhost:8080/jnlpJars/jenkins-cli.jar -O /tmp/jenkins-cli.jar
                fi

                echo "Fetching authentication credentials of Jenkins"
                JENKINS_SECRET=$(aws secretsmanager get-secret-value --secret-id jenkins/production-github --region 'us-east-1')
                JENKINS_USERNAME=$(echo $JENKINS_SECRET | jq -r '.SecretString' | jq -r .username)
                JENKINS_PASSWORD=$(echo $JENKINS_SECRET | jq -r '.SecretString' | jq -r .jenkins_apitoken)

                # Let the jenkins stabalize after restoration
                sleep 45

                echo "Updating Jenkins Plugins"
                # https://stackoverflow.com/a/25647793
                UPDATE_JENKINS_PLUGINS=$( java -jar /tmp/jenkins-cli.jar -s http://127.0.0.1:8080/ -auth $JENKINS_USERNAME:$JENKINS_PASSWORD list-plugins | grep -e ')$' | awk '{ print $1 }' );
                while [ ! -z "$UPDATE_JENKINS_PLUGINS" ]; do
                  echo Updating Jenkins Plugins: $UPDATE_JENKINS_PLUGINS;
                  java -jar /tmp/jenkins-cli.jar -s http://127.0.0.1:8080/ -auth $JENKINS_USERNAME:$JENKINS_PASSWORD install-plugin $UPDATE_JENKINS_PLUGINS;
                  java -jar /tmp/jenkins-cli.jar -s http://127.0.0.1:8080/ -auth $JENKINS_USERNAME:$JENKINS_PASSWORD safe-restart;
                  # Let the jenkins stabalize after restart
                  sleep 45
                  UPDATE_JENKINS_PLUGINS=$( java -jar /tmp/jenkins-cli.jar -s http://127.0.0.1:8080/ -auth $JENKINS_USERNAME:$JENKINS_PASSWORD list-plugins | grep -e ')$' | awk '{ print $1 }' );
                done
              mode: "000755"
              owner: "root"
              group: "root"

        # Restoring jenkins data from S3 bucket
        05_restore-jenkins-data:
          commands:
            01_sync:
              command: /usr/bin/s3-sync RESTORE
            02_id_rsa:
              command: aws s3 --region us-east-1 cp s3://reptrak-backups/pem/github_id_rsa /var/lib/jenkins/.ssh/id_rsa --only-show-errors && chown jenkins:jenkins /var/lib/jenkins/.ssh/id_rsa && chmod 400 /var/lib/jenkins/.ssh/id_rsa

        # Call Jenkins plugins update script
        06_update-jenkins-plugins:
          commands:
            01_update-jenkins:
              command: /usr/bin/jenkins-plugin-updater

        # Adding cron job to backup the jenkins data to S3 bucket
        07_crontab:
          commands:
            01_tab:
              command: bash -c 'cat <(crontab -l) <(echo "0 0 * * * /usr/bin/s3-sync BACKUP") | crontab -'

    Properties:
      IamInstanceProfile: !Ref JenkinsRoleProfile
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref VolumeSize
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref JenkinsPorts
          SubnetId: !Ref Subnet
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-master
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -e
          env

          # AWS CloudFormation helper scripts aren't included by default in non Amazon Linux AMIs
          apt -qq update
          mkdir -p /opt/aws/bin
          wget -q https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

          wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
          dpkg -i /tmp/amazon-cloudwatch-agent.deb

          /opt/aws/bin/cfn-init -v \
             --stack ${AWS::StackName} \
             --resource JenkinsMasterEC2 \
             --region ${AWS::Region} \
             --configsets installation

          # Signal results
          /opt/aws/bin/cfn-signal -e $? \
             --stack ${AWS::StackName} \
             --resource JenkinsMasterEC2 \
             --region ${AWS::Region} \
             --reason "CFN config setup exited with value $?."
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M

  # Associate Elastic IP with Instance
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref JenkinsMasterEC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-master

  JenkinsCloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  # JenkinsDNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId : Z123KCZIVJ9B18
  #     Name:
  #       Fn::Join:
  #         - "."
  #         - - !Ref AWS::StackName
  #           - reptrak.io
  #     ResourceRecords:
  #       - !GetAtt JenkinsMasterEC2.PublicIp
  #     TTL: '300'
  #     Type: A

Outputs:
  JenkinsURL:
    Description: Jenkins web URL
    Value: !Sub 'http://${AWS::StackName}.reptrak.io:8080'

  JenkinsInternalIP:
    Description: Internal IP
    Value: !GetAtt JenkinsMasterEC2.PrivateIp

  JenkinsPublicIP:
    Description: Public IP
    Value: !GetAtt JenkinsMasterEC2.PublicIp
